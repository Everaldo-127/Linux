#!/bin/bash

LOG_FILE="/var/log/LOG_GITHUB.txt"

# Fun√ß√£o para registrar no log com timestamp
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | sudo tee -a "$LOG_FILE" >/dev/null
}

# Verifica se script est√° rodando como root para poder escrever no log
if [[ $EUID -ne 0 ]]; then
    echo "Por favor, execute como root para que o script possa escrever no arquivo de log em /var/log."
    exit 1
fi

# Verifica se o Git est√° instalado
check_git() {
    if ! command -v git >/dev/null 2>&1; then
        echo "Git n√£o est√° instalado. Abortando..."
        log "Git n√£o est√° instalado. Abortando."
        exit 1
    else
        echo "Git est√° instalado."
        log "Git est√° instalado."
    fi
}

# Verifica as depend√™ncias necess√°rias (curl e jq)
check_dependencies() {
    local dependencies=("curl" "jq" "rsync")
    for dep in "${dependencies[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            echo "Depend√™ncia $dep n√£o est√° instalada. Abortando..."
            log "Depend√™ncia $dep n√£o est√° instalada. Abortando."
            exit 1
        fi
    done
    echo "Todas as depend√™ncias est√£o instaladas."
    log "Todas as depend√™ncias est√£o instaladas."
}

# Solicita token de acesso pessoal para autentica√ß√£o no GitHub
get_credentials() {
    read -p "Digite seu nome de usu√°rio do GitHub: " GITHUB_USER
    read -sp "Digite seu token de acesso pessoal do GitHub (com permiss√£o repo): " GITHUB_TOKEN
    echo
    if [[ -z "$GITHUB_USER" || -z "$GITHUB_TOKEN" ]]; then
        echo "Credenciais incompletas. Abortando."
        log "Credenciais incompletas. Abortando."
        exit 1
    fi
}

# Verifica se opera√ß√£o foi bem sucedida
check_response() {
    local http_code=$1
    local operation=$2
    if [[ "$operation" == "delete" && "$http_code" == "204" ]]; then
        return 0
    elif [[ "$operation" == "rename" && "$http_code" == "200" ]]; then
        return 0
    else
        return 1
    fi
}

# Criar reposit√≥rio no GitHub
create_repository() {
    get_credentials

    read -p "Digite o nome do novo reposit√≥rio: " REPO_NAME
    if [[ -z "$REPO_NAME" ]]; then
        echo "Nome do reposit√≥rio n√£o pode ser vazio."
        return
    fi

    read -p "Digite uma descri√ß√£o para o reposit√≥rio (opcional): " REPO_DESC
    read -p "O reposit√≥rio ser√° privado? (y/n): " IS_PRIVATE

    if [[ "$IS_PRIVATE" == "y" || "$IS_PRIVATE" == "Y" ]]; then
        PRIVATE_FLAG=true
    else
        PRIVATE_FLAG=false
    fi

    local URL="https://api.github.com/user/repos"
    local DATA="{\"name\":\"${REPO_NAME}\",\"description\":\"${REPO_DESC}\",\"private\":${PRIVATE_FLAG}}"

    echo "Criando reposit√≥rio '$REPO_NAME'..."

    HTTP_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST -u "${GITHUB_USER}:${GITHUB_TOKEN}" \
        -H "Content-Type: application/json" -d "$DATA" "$URL")

    if [[ "$HTTP_RESPONSE" == "201" ]]; then
        echo "Reposit√≥rio '$REPO_NAME' criado com sucesso."
        log "Reposit√≥rio '$REPO_NAME' criado com sucesso pelo usu√°rio $GITHUB_USER."
    else
        echo "Falha ao criar o reposit√≥rio. C√≥digo HTTP: $HTTP_RESPONSE"
        log "Falha ao criar o reposit√≥rio '$REPO_NAME'. C√≥digo HTTP: $HTTP_RESPONSE"
    fi
}

# Renomear reposit√≥rio
rename_repository() {
    read -p "Digite o nome atual do reposit√≥rio: " OLD_NAME
    if [[ -z "$OLD_NAME" ]]; then
        echo "Nome antigo do reposit√≥rio n√£o pode ser vazio."
        return
    fi
    read -p "Digite o novo nome do reposit√≥rio: " NEW_NAME
    if [[ -z "$NEW_NAME" ]]; then
        echo "Novo nome do reposit√≥rio n√£o pode ser vazio."
        return
    fi

    read -p "Confirma a renomea√ß√£o do reposit√≥rio '$OLD_NAME' para '$NEW_NAME'? (y/n): " CONFIRM
    if [[ "$CONFIRM" != "y" && "$CONFIRM" != "Y" ]]; then
        echo "Renomea√ß√£o cancelada."
        log "Renomea√ß√£o de '$OLD_NAME' para '$NEW_NAME' cancelada pelo usu√°rio."
        return
    fi

    get_credentials

    local URL="https://api.github.com/repos/${GITHUB_USER}/${OLD_NAME}"
    local DATA="{\"name\":\"${NEW_NAME}\"}"

    echo "Processando renomea√ß√£o do reposit√≥rio '$OLD_NAME' para '$NEW_NAME'..."

    HTTP_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X PATCH -u "${GITHUB_USER}:${GITHUB_TOKEN}" \
        -H "Content-Type: application/json" -d "$DATA" "$URL")

    if check_response "$HTTP_RESPONSE" "rename"; then
        echo "Reposit√≥rio renomeado com sucesso para '$NEW_NAME'."
        log "Reposit√≥rio '$OLD_NAME' renomeado para '$NEW_NAME' com sucesso."
    else
        echo "Falha ao renomear o reposit√≥rio. C√≥digo HTTP: $HTTP_RESPONSE"
        log "Falha ao renomear o reposit√≥rio '$OLD_NAME'."
    fi
}

# Excluir reposit√≥rio
delete_repository() {
    read -p "Digite o nome do reposit√≥rio a ser exclu√≠do: " REPO_NAME
    if [[ -z "$REPO_NAME" ]]; then
        echo "Nome do reposit√≥rio n√£o pode ser vazio."
        return
    fi

    read -p "Confirma a exclus√£o do reposit√≥rio '$REPO_NAME'? (y/n): " CONFIRM
    if [[ "$CONFIRM" != "y" && "$CONFIRM" != "Y" ]]; then
        echo "Exclus√£o cancelada."
        log "Exclus√£o do reposit√≥rio $REPO_NAME cancelada pelo usu√°rio."
        return
    fi

    get_credentials

    local URL="https://api.github.com/repos/${GITHUB_USER}/${REPO_NAME}"

    echo "Processando exclus√£o do reposit√≥rio '$REPO_NAME'..."

    HTTP_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE -u "${GITHUB_USER}:${GITHUB_TOKEN}" "$URL")

    if check_response "$HTTP_RESPONSE" "delete"; then
        echo "Reposit√≥rio '$REPO_NAME' exclu√≠do com sucesso."
        log "Reposit√≥rio '$REPO_NAME' exclu√≠do com sucesso."
    else
        echo "Falha ao excluir o reposit√≥rio. C√≥digo HTTP: $HTTP_RESPONSE"
        log "Falha ao excluir o reposit√≥rio '$REPO_NAME'."
    fi
}

# Clonar reposit√≥rio localmente
clonar_repository() {
    get_credentials

    read -p "Digite o nome do reposit√≥rio a ser clonado: " REPO_NAME
    if [[ -z "$REPO_NAME" ]]; then
        echo "Nome do reposit√≥rio n√£o pode ser vazio."
        return
    fi

    read -p "Digite o diret√≥rio de destino (ou deixe em branco para usar o nome do reposit√≥rio): " DEST_DIR
    [[ -z "$DEST_DIR" ]] && DEST_DIR="$REPO_NAME"

    local REPO_URL="https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/${GITHUB_USER}/${REPO_NAME}.git"

    echo "Clonando reposit√≥rio '$REPO_NAME' para '$DEST_DIR'..."
    log "Clonando reposit√≥rio '$REPO_NAME' para '$DEST_DIR'."

    if git clone "$REPO_URL" "$DEST_DIR"; then
        echo "Reposit√≥rio clonado com sucesso."
        log "Reposit√≥rio '$REPO_NAME' clonado com sucesso no diret√≥rio '$DEST_DIR'."
    else
        echo "Erro ao clonar o reposit√≥rio."
        log "Erro ao clonar o reposit√≥rio '$REPO_NAME'."
    fi
}

# Enviar arquivos para reposit√≥rios GitHub
enviar_para_github() {
    DIR_ATUAL=$(pwd)
    log "Diret√≥rio de execu√ß√£o: $DIR_ATUAL"

    read -p "Usu√°rio do GitHub: " USUARIO_GITHUB
    read -sp "Token de acesso pessoal (PAT) com permiss√£o 'repo': " TOKEN_PAT
    echo
    read -p "Digite os nomes dos reposit√≥rios (separados por espa√ßo): " REPOSITORIOS
    read -p "Mensagem base do commit: " MENSAGEM_COMMIT

    for REPO in $REPOSITORIOS; do
        log "üìÇ Processando reposit√≥rio: $REPO"

        TMP_DIR=$(mktemp -d)
        log "üåê Diret√≥rio tempor√°rio criado: $TMP_DIR"

        git clone --depth=1 "https://${USUARIO_GITHUB}:${TOKEN_PAT}@github.com/${USUARIO_GITHUB}/${REPO}.git" "$TMP_DIR" || {
            log "‚ùå Falha ao clonar o reposit√≥rio remoto."
            rm -rf "$TMP_DIR"
            continue
        }

        cd "$TMP_DIR" || continue
        git checkout main || git checkout -b main
        cd "$DIR_ATUAL" || continue

        log "üìÅ Sincronizando arquivos do diret√≥rio atual para diret√≥rio tempor√°rio..."
        rsync -a --exclude='.git' "$DIR_ATUAL"/ "$TMP_DIR"/

        cd "$TMP_DIR" || continue
        git add .

        if git diff --cached --quiet; then
            log "‚ö†Ô∏è Sem altera√ß√µes para commit."
        else
            git commit -m "$MENSAGEM_COMMIT [$(date '+%Y-%m-%d %H:%M:%S')]"
            log "‚úÖ Commit realizado: $MENSAGEM_COMMIT"
        fi

        git push origin main || {
            log "‚ùå Falha no push"
            rm -rf "$TMP_DIR"
            continue
        }

        cd "$DIR_ATUAL" || continue
        rm -rf "$TMP_DIR"
        log "üóëÔ∏è Diret√≥rio tempor√°rio removido"
        log "‚úÖ Push realizado com sucesso!"
    done

    log "=== ENVIO FINALIZADO ==="
}

# Menu principal
main_menu() {
    while true; do
        echo ""
        echo "========================================"
        echo "Gerenciamento de Reposit√≥rios GitHub"
        echo "========================================"
        echo "1) Excluir reposit√≥rio"
        echo "2) Renomear reposit√≥rio"
        echo "3) Criar reposit√≥rio"
        echo "4) Clonar reposit√≥rio localmente"
        echo "5) Enviar arquivos para reposit√≥rio"
        echo "6) Sair"
        read -p "Escolha uma op√ß√£o [1-6]: " OPTION

        case "$OPTION" in
            1) delete_repository ;;
            2) rename_repository ;;
            3) create_repository ;;
            4) clonar_repository ;;
            5) enviar_para_github ;;
            6) echo "Saindo..."; exit 0 ;;
            *) echo "Op√ß√£o inv√°lida. Tente novamente." ;;
        esac
    done
}

# Execu√ß√£o principal
check_git
check_dependencies
main_menu

