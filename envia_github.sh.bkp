#!/bin/bash

WORKDIR="$(pwd)"
LOG_DIR="$HOME/.logs"
LOGFILE="$LOG_DIR/multi_push_github.log"
mkdir -p "$LOG_DIR"

timestamp() {
  date "+%Y-%m-%d %H:%M:%S"
}

log() {
  echo "[$(timestamp)] $1" | tee -a "$LOGFILE"
}

log "=== IN√çCIO DO PROCESSO ==="
log "Diret√≥rio de execu√ß√£o: $WORKDIR"

cd "$WORKDIR" || { log "‚ùå Falha ao acessar diret√≥rio $WORKDIR"; exit 1; }

if [ ! -d .git ]; then
  log "‚ö†Ô∏è Diret√≥rio n√£o √© um reposit√≥rio Git. Inicializando..."
  git init || { log "‚ùå Falha ao inicializar repo Git"; exit 1; }
  git checkout -b main || git checkout -b master
  log "‚úÖ Reposit√≥rio Git inicializado."
fi

GIT_USER_EMAIL=$(git config user.email || echo "")
GIT_USER_NAME=$(git config user.name || echo "")

if [ -z "$GIT_USER_EMAIL" ]; then
  read -p "Git user.email n√£o configurado. Informe seu email Git: " email_input
  git config user.email "$email_input" || { log "‚ùå Falha ao configurar git user.email"; exit 1; }
  log "‚úÖ Configurado git user.email localmente."
fi

if [ -z "$GIT_USER_NAME" ]; then
  read -p "Git user.name n√£o configurado. Informe seu nome Git: " name_input
  git config user.name "$name_input" || { log "‚ùå Falha ao configurar git user.name"; exit 1; }
  log "‚úÖ Configurado git user.name localmente."
fi

read -p "Usu√°rio do GitHub: " GITHUB_USER
read -s -p "Token de acesso pessoal (PAT) com permiss√£o 'repo': " GITHUB_PAT
echo ""
read -p "Digite os nomes dos reposit√≥rios (separados por espa√ßo): " REPOS
read -p "Mensagem base do commit: " COMMIT_MSG_BASE

log "üìÇ Listando arquivos no diret√≥rio e filtrando maiores que 100MB..."
LARGE_FILES=()
while IFS= read -r -d $'\0' file; do
  size_bytes=$(stat -c%s "$file")
  size_mb=$((size_bytes / 1024 / 1024))
  if [ "$size_mb" -ge 100 ]; then
    log "‚ö†Ô∏è Arquivo $file excede 100MB e ser√° ignorado."
    LARGE_FILES+=("$file")
  fi
done < <(find . -type f -print0)

TEMP_GITIGNORE=".gitignore_temp"
if [ "${#LARGE_FILES[@]}" -gt 0 ]; then
  log "Criando arquivo tempor√°rio $TEMP_GITIGNORE para ignorar arquivos grandes..."
  > "$TEMP_GITIGNORE"
  for f in "${LARGE_FILES[@]}"; do
    echo "$f" >> "$TEMP_GITIGNORE"
  done
  git add "$TEMP_GITIGNORE"
  git commit -m "Ignorando arquivos grandes temporariamente para push [$(timestamp)]" 2>/dev/null || true
else
  [ -f "$TEMP_GITIGNORE" ] && rm -f "$TEMP_GITIGNORE"
fi

for REPO in $REPOS; do
  log "‚ñ∂ Processando reposit√≥rio: $REPO"

  REMOTE_URL="https://${GITHUB_USER}:${GITHUB_PAT}@github.com/${GITHUB_USER}/${REPO}.git"

  git remote remove origin 2>/dev/null
  git remote add origin "$REMOTE_URL"

  CURRENT_BRANCH=$(git symbolic-ref --short HEAD 2>/dev/null || echo "main")
  log "üîÅ Branch atual: $CURRENT_BRANCH"

  log "üîÑ Sincronizando branch local '$CURRENT_BRANCH' com remoto..."

  git fetch origin "$CURRENT_BRANCH" || { log "‚ùå Falha no git fetch"; exit 1; }

  if git rev-parse --verify HEAD >/dev/null 2>&1; then
    if ! git rebase "origin/$CURRENT_BRANCH"; then
      log "‚ùå Conflito ao rebasing. Resolva manualmente e execute o script novamente."
      exit 1
    fi
  else
    git reset --hard "origin/$CURRENT_BRANCH" || { log "‚ùå Falha no reset para origin/$CURRENT_BRANCH"; exit 1; }
  fi

  log "‚ûï Adicionando arquivos ao Git..."
  git add . || { log "‚ùå Falha no git add"; exit 1; }

  if git diff --cached --quiet; then
    log "‚ÑπÔ∏è Nenhuma mudan√ßa para commitar."
  else
    COMMIT_MSG="${COMMIT_MSG_BASE} [$(timestamp)]"
    git commit -m "$COMMIT_MSG" || { log "‚ùå Falha no git commit"; exit 1; }
    log "‚úÖ Commit realizado: $COMMIT_MSG"
  fi

  log "üöÄ Enviando para reposit√≥rio: $REPO"
  if git push -u origin "$CURRENT_BRANCH"; then
    log "‚úÖ Enviado com sucesso para '$REPO'."
  else
    log "‚ùå Erro ao enviar para '$REPO'."
  fi
done

if [ -f "$TEMP_GITIGNORE" ]; then
  git rm --cached "$TEMP_GITIGNORE" 2>/dev/null || true
  rm -f "$TEMP_GITIGNORE"
  log "üßπ Removido .gitignore tempor√°rio e arquivo local."
fi

log "=== PROCESSO FINALIZADO ==="

